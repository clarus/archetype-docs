"use strict";(self.webpackChunkarchetype_docs=self.webpackChunkarchetype_docs||[]).push([[1477],{10:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"shortcut-evaluation","metadata":{"permalink":"/blog/shortcut-evaluation","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-06-04-shortcut-evaluation.md","source":"@site/blog/2022-06-04-shortcut-evaluation.md","title":"Shortcut evaluation","description":"We present a change in version 1.2.17 of the evaluation process of boolean operators and and or in test expression of the if instruction and expression.","date":"2022-06-04T00:00:00.000Z","formattedDate":"June 4, 2022","tags":[{"label":"and","permalink":"/blog/tags/and"},{"label":"or","permalink":"/blog/tags/or"},{"label":"if","permalink":"/blog/tags/if"},{"label":"new feature","permalink":"/blog/tags/new-feature"}],"readingTime":0.57,"truncated":true,"authors":[{"name":"Guillaume Duhamel","title":"CTO Completium","url":"https://www.linkedin.com/in/guillaumeduhamel/","imageURL":"https://media-exp1.licdn.com/dms/image/C4D03AQGxFFOLb-0sew/profile-displayphoto-shrink_400_400/0/1516528565176?e=1658966400&v=beta&t=w8NwuTiiP--EwNxQK57UHYvBGFvcTccj8NTFav5unVo","key":"gd"}],"frontMatter":{"slug":"shortcut-evaluation","title":"Shortcut evaluation","authors":["gd"],"tags":["and","or","if","new feature"]},"nextItem":{"title":"Accessing assets","permalink":"/blog/asset-access"}},"content":"We present a change in version `1.2.17` of the evaluation process of boolean operators [`and`](/docs/reference/expressions/operators/arithmetic#a-and-b) and [`or`](/docs/reference/expressions/operators/arithmetic#a-or-b) in test expression of the [`if`](/docs/reference/instructions/control#if) instruction and expression.\\n\\nConsider the following `if` instruction:\\n```archetype\\nif a and b then\\n /* */\\nend\\n```\\n\x3c!--truncate--\x3e\\n\\nBefore version `1.2.7`, both expressions `a` and `b` were evaluated, meaning that if `b` is a [failing](/docs/reference/instructions/divergent#faile) expression, the evaluation fails even if `a` is true.\\n\\nSince version `1.2.7`, `a and b` is replaced by [conditional](/docs/reference/expressions/controls#if) expression:\\n```archetype\\nif a then b else false\\n```\\n\\nEquivalently, expression `a or b` is replaced by:\\n```archetype\\nif a then true else b else false\\n```\\n\\nSuch that expression `b` is evaluated only when necessary."},{"id":"asset-access","metadata":{"permalink":"/blog/asset-access","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-05-25-asset-access.md","source":"@site/blog/2022-05-25-asset-access.md","title":"Accessing assets","description":"We present an improvement in the way assets data are accessed since version 1.2.16 of Archetype.","date":"2022-05-25T00:00:00.000Z","formattedDate":"May 25, 2022","tags":[{"label":"asset","permalink":"/blog/tags/asset"},{"label":"new feature","permalink":"/blog/tags/new-feature"}],"readingTime":1.825,"truncated":true,"authors":[{"name":"Guillaume Duhamel","title":"CTO Completium","url":"https://www.linkedin.com/in/guillaumeduhamel/","imageURL":"https://media-exp1.licdn.com/dms/image/C4D03AQGxFFOLb-0sew/profile-displayphoto-shrink_400_400/0/1516528565176?e=1658966400&v=beta&t=w8NwuTiiP--EwNxQK57UHYvBGFvcTccj8NTFav5unVo","key":"gd"}],"frontMatter":{"slug":"asset-access","title":"Accessing assets","authors":["gd"],"tags":["asset","new feature"]},"prevItem":{"title":"Shortcut evaluation","permalink":"/blog/shortcut-evaluation"},"nextItem":{"title":"Iterable big map","permalink":"/blog/iterable-big-map"}},"content":"We present an improvement in the way [assets](/docs/asset) data are accessed since version [`1.2.16`](https://github.com/edukera/archetype-lang/releases/tag/1.2.16) of Archetype.\\n\\n### Problem\\n\\nUntil this version, the only way to access an asset data was the field accessor operator of the form `A[k].f`, where `A` is the asset collection, `k` the asset key and `f` the asset field.\\n\\n\x3c!--truncate--\x3e\\n\\nFor example, consider the following asset declaration:\\n```archetype\\nasset vehicle {\\n  vin          : string;\\n  manufacturer : string;\\n  year         : nat;\\n  nbdoors      : nat\\n}\\n```\\n\\nThe manufacturer of vehicle `\\"1G1AF1F57A7192174\\"` is then accessed as follows:\\n```archetype\\nconst m = vehicle[\\"1G1AF1F57A7192174\\"].manufacturer\\n```\\n\\nThis expression fails when the key is not found in the asset collection. As a consequence, accessing several fields sucessively repeats the test and fail instruction as in:\\n\\n```archetype\\nconst m = vehicle[\\"1G1AF1F57A7192174\\"].manufacturer;\\nconst y = vehicle[\\"1G1AF1F57A7192174\\"].year;\\nconst n = vehicle[\\"1G1AF1F57A7192174\\"].nbdoors\\n```\\n\\nHere the test and fail instructions are repeated three times.\\n\\n### Solution\\n\\nIt is now possible to retrieve the asset data in the form of a record with the [`[]`](/docs/reference/expressions/asset#ak--asset_keya) operator.\\n\\nIn the example above, the proper way to retrieve all asset data is now as follows:\\n```archetype\\nconst v = vehicle[\\"1G1AF1F57A7192174\\"];\\nconst m = v.manufacturer;\\nconst y = v.year;\\nconst n = v.nbdoors\\n```\\n\\nThe access operator still fails if the key is not `vehicle` collection.\\n\\nVersion [`1.2.16`](https://github.com/edukera/archetype-lang/releases/tag/1.2.16) also introduces the [`get`](/docs/reference/expressions/asset#agetk--asset_keya) method for asset collection. As for [`map`](/docs/reference/types#map<K,%20V>), it returns an option of record:\\n\\n```archetype\\nconst k = \\"1G1AF1F57A7192174\\";\\nmatch vehicle.get(k) with\\n| some v ->\\n  const m = v.manufacturer;\\n  const y = v.year;\\n  const n = v.nbdoors;\\n  /* ... */\\n| none -> fail(\\"Key \\" + k + \\" not found in collection\\")\\nend\\n```\\n\\n### Single field access\\n\\nSituations where a single asset field is accessed is very common though. In this case, version [`1.2.16`](https://github.com/edukera/archetype-lang/releases/tag/1.2.16) provides two new dedicated operators: [`[]?.`](/docs/reference/expressions/asset#ak--asset_keyaf) and [`[]?:`](/docs/reference/expressions/asset#ak--asset_keya--e--d).\\n\\nFor example, `is_coupe` below is true if field `nbdoors` is equal to 3, and `false` if asset is not found:\\n\\n```archetype\\nconst k = \\"1G1AF1F57A7192174\\";\\nconst is_coupe = vehicle[k] ? the.nbdoors = 3 : false\\n```\\n\\nThe following retrieves an [`option`](/docs/reference/types#option<T>) of [`nat`](/docs/reference/types#nat) to treat more specifically the case when the asset is not found:\\n```archetype\\nconst on = vehicle[\\"1G1AF1F57A7192174\\"]?.nbdoors\\n```"},{"id":"iterable-big-map","metadata":{"permalink":"/blog/iterable-big-map","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-04-24-iterable-big-map.md","source":"@site/blog/2022-04-24-iterable-big-map.md","title":"Iterable big map","description":"We present a new type of map called iterablebigmap, which has the scalability property of a bigmap, and which can be iterated like a basic map.","date":"2022-04-24T00:00:00.000Z","formattedDate":"April 24, 2022","tags":[{"label":"big map","permalink":"/blog/tags/big-map"},{"label":"new feature","permalink":"/blog/tags/new-feature"}],"readingTime":2.875,"truncated":true,"authors":[{"name":"Benoit Rognier","title":"CEO Completium","url":"https://www.linkedin.com/in/benoitrognier/","imageURL":"https://media-exp1.licdn.com/dms/image/C4E03AQF04rtSnCch5A/profile-displayphoto-shrink_400_400/0/1517720007405?e=1658966400&v=beta&t=MkbCyKfZt4yuEkvDxxBk_nMUHtDFJsS42zfhcLlHVX4","key":"br"}],"frontMatter":{"slug":"iterable-big-map","title":"Iterable big map","authors":["br"],"tags":["big map","new feature"]},"prevItem":{"title":"Accessing assets","permalink":"/blog/asset-access"},"nextItem":{"title":"Events","permalink":"/blog/events"}},"content":"import useBaseUrl from \'@docusaurus/useBaseUrl\';\\nimport ThemedImage from \'@theme/ThemedImage\';\\n\\nWe present a new type of map called [`iterable_big_map`](/docs/reference/types#iterable_big_map<K,%20V>), which has the scalability property of a [`big_map`](/docs/reference/types#big_map<K,%20V>), and which can be [iterated](/docs/reference/instructions/containers#map) like a basic [`map`](/docs/reference/types#map<K,%20V>).\\n\\nThis feature was suggested by [Nomadic Labs](https://www.nomadic-labs.com/). Thank you to [Lucas Feli](https://www.linkedin.com/in/lucas-felli-815653111/) and [Charles Delhinger](https://www.linkedin.com/in/charles-dehlinger-a34699166/) for the algorithm.\\n\\n## Example\\n\\nConsider the following declaration of an iterable big map between a `nat` key and a `bytes` value:\\n```archetype\\nvariable ibm : iterable_big_map<nat, bytes> = []\\n```\\n\x3c!--truncate--\x3e\\n\\nWhile `ibm` has the scalability of a big map (in terms of number of entries), it can also be iterated with the `for` control instruction:\\n```archetype\\nfor (k,v) in ibm do\\n  /* k is the key, v is the value */\\ndone\\n```\\n\\n:::info\\nNote that:\\n* the natural order of the key values is not garanteed (unlike basic [`map`](/docs/reference/types#map<K,%20V>))\\n* the cost of operations increases compared to a [`big_map`](/docs/reference/types#big_map<K,%20V>)\\n:::\\n\\nAn Archetype [asset](/docs/asset) may now be compiled as an iterable big map; it then benefits from the *whole* asset [API](/docs/asset#api). For example:\\n```archetype\\nasset car to iterable_big_map {\\n  vin       : string;\\n  nbdoors   : nat;\\n  nbrepairs : nat;\\n  owner     : address;\\n}\\n```\\n\\n## Principle\\n\\nSince it is always possible to iterate from `1` to `n`, the idea is to create a big map that associates the iteration integer value to the map\'s key value. It is also necessary to associate the map key back to this iteration integer (see *remove* operation below).\\n\\nThe following example illustrates the design of two big maps called *Keys* and *Values* derived from the original map:\\n<center>\\n<ThemedImage style={{ width: \'80%\' }}\\n  alt=\\"IBM1\\"\\n  sources={{\\n    light: useBaseUrl(\'/img/blog/ibm1-light.svg\'),\\n    dark: useBaseUrl(\'/img/blog/ibm1-dark.svg\'),\\n  }}\\n/>\\n</center>\\n\\n* *Keys* associates the iteration integer with the map key\\n* *Values* is the original map where the value is augmented with the iteration integer\\n\\n### Add\\n\\nThe *add* operation consists in:\\n* associating the next iteration value (`Size + 1`) with the new key in the *Keys* map\\n* associating the new key to the pair of next iteration value and new value in the *Values* map\\n* incrementing the *Size* value\\n\\nThe operation is illustrated below with the addition of the key `131` with value `e5`:\\n<center>\\n<ThemedImage style={{ width: \'80%\' }}\\n  alt=\\"IBM1\\"\\n  sources={{\\n    light: useBaseUrl(\'/img/blog/ibm2-light.svg\'),\\n    dark: useBaseUrl(\'/img/blog/ibm2-dark.svg\'),\\n  }}\\n/>\\n</center>\\n\\n### Update\\n\\nThe *update* operation is straightforward and consists in updating the *Values* map with the new value.\\n\\n### Remove\\n\\nThe *remove* operation is a step-wise process:\\n- the iteration index of the removed key is retrieved from the *Values* map and used to remove the entry in the *Keys* map\\n- the entry is then removed from the *Values* map\\n\\nAt this stage, the iteration values are not consistent since one iteration value has been removed.\\n\\nIt is then necessary to associate the last added element with the removed iteration integer by:\\n- removing the last iteration integer and associate back the removed iteration integer with the last added key in the *Keys* mpa\\n- updating the iteration integer of last added key in the *Values* map\\n\\nThe process is illustrated below with the removal of the entry `29` (associated with iteration value `2`):\\n<center>\\n<ThemedImage style={{ width: \'80%\' }}\\n  alt=\\"IBM1\\"\\n  sources={{\\n    light: useBaseUrl(\'/img/blog/ibm3-light.svg\'),\\n    dark: useBaseUrl(\'/img/blog/ibm3-dark.svg\'),\\n  }}\\n/>\\n</center>\\n\\n## Implementation\\n\\nAn iterable big map is implemented as a triplet of two big maps (*Keys* and *Values*) and one *Size* integer.\\n\\nThe screenshot below of [Better Call Dev](https://better-call.dev/) shows the resulting triplet:\\n\\n![ibm4](/img/blog/ibm4.png)"},{"id":"events","metadata":{"permalink":"/blog/events","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-03-21-events.md","source":"@site/blog/2022-03-21-events.md","title":"Events","description":"We present the new instruction emit to emit an event, in a similar an event is emitted in languages like solidity.","date":"2022-03-21T00:00:00.000Z","formattedDate":"March 21, 2022","tags":[{"label":"events","permalink":"/blog/tags/events"},{"label":"new feature","permalink":"/blog/tags/new-feature"}],"readingTime":2.33,"truncated":true,"authors":[{"name":"Benoit Rognier","title":"CEO Completium","url":"https://www.linkedin.com/in/benoitrognier/","imageURL":"https://media-exp1.licdn.com/dms/image/C4E03AQF04rtSnCch5A/profile-displayphoto-shrink_400_400/0/1517720007405?e=1658966400&v=beta&t=MkbCyKfZt4yuEkvDxxBk_nMUHtDFJsS42zfhcLlHVX4","key":"br"}],"frontMatter":{"slug":"events","title":"Events","authors":["br"],"tags":["events","new feature"]},"prevItem":{"title":"Iterable big map","permalink":"/blog/iterable-big-map"},"nextItem":{"title":"Welcome","permalink":"/blog/welcome"}},"content":"We present the new instruction `emit` to emit an event, in a similar an event is emitted in languages like solidity.\\n\\nThis feater was suggested by [Nomadic Labs](https://www.nomadic-labs.com/). Thank you to [Bruno Bernardo](https://www.linkedin.com/in/brunobernardo/) for the event well mechanism.\\n\\nAn event is declared with the `event` keyword, similarly to a record:\\n```archetype\\nevent HighestBidIncreased {\\n  bidder : address;\\n  amount : tez\\n}\\n```\\n\x3c!--truncate--\x3e\\n\\nThe `emit` instruction is then used in an entrypoint as illustrated below:\\n```archetype\\nentry bid() {\\n  /* ... */\\n  if transferred > highestbid then begin\\n    highestbid := transferred;\\n    emit<HighestBidIncreased>({ source; transferred })\\n  end\\n}\\n```\\n\\n### Event well\\n\\nThe emition of an event generates a call to a contract called *event well*. This contract provides a single entrypoint named *event* which takes an argument typed [`bytes`](/docs/reference/types#bytes).\\n\\nThe code of the event well contract is then:\\n```archetype\\narchetype event_well\\n\\nentry %event(arg : bytes) {}\\n```\\n\\nThe event well is deployed at the address [`KT1AHVF5m8XaWPQCGgfAsZ9eSJJZ7WVGV2hE`](https://better-call.dev/ithacanet/KT1AHVF5m8XaWPQCGgfAsZ9eSJJZ7WVGV2hE/operations) on the mainnet, and at [`KT1ReVgfaUqHzWWiNRfPXQxf7TaBLVbxrztw`](https://better-call.dev/ithacanet/KT1ReVgfaUqHzWWiNRfPXQxf7TaBLVbxrztw/operations)on Ithacanet.\\n\\n### Event\\n\\nThe `emit` instruction builds the event argument as a triplet of:\\n* the event name\\n* the event annotated Michelson type\\n* packed value of the event data\\n\\nIn the example of the *HighestBidIncreased* presented above, the following `emit` instruction:\\n```archetype\\nemit<HighestBidIncreased>({ source; transferred })\\n```\\n\\nis equivalent to:\\n```archetype\\nconst e = pack((\\n  \\"HighestBidIncreased\\",\\n  \\"pair (address %bidder) (tez %amount)\\",\\n  pack({\\n    bidder = source;\\n    amount = transferred\\n  })\\n});\\nconst event_well = KT1AHVF5m8XaWPQCGgfAsZ9eSJJZ7WVGV2hE;\\ntransfer 0tz to event_well call event<bytes>(e)\\n```\\n\\n### Retrieve events\\n\\nA Typescript library, called the [*crank*](https://www.npmjs.com/package/@completium/event-well-crank), is available to retrieve event data from a Dapp.\\n\\nThe *crank* receives events from contracts and executes event handler functions.\\n\\nFor example, the `handleHBI` function below is executed when a `HighestBidIncreased` event is emitted by the contract:\\n\\n```js\\nimport { startCrank } from \'@completium/event-well-crank\'\\nimport {\\n  HighestBidIncreased,\\n  register_HighestBidIncreased } from \'./bid-bindings.ts\'\\n\\nconst contract = \\"KT1...\\" // address of the emitter contract\\n\\nconst handleHBI = (hbi : HighestBidIncreased) => {\\n  // ...\\n  console.log(`${hbi.bidder} is now the highest bid bidder.`)\\n}\\n\\n// register Handler\\nregister_HighestBidIncreased(contract, handleHBI);\\n\\n// Start crank\\nawait startCrank();\\n```\\nThe HighestBidIncreased type and register_HighestBidIncreased function are bindings code generated by completium CLI:\\n\\n```\\n$ completium-cli generate bindings-ts bid.arl > bid-bindings.ts\\n```\\n\\n### Dapp example\\n\\nThe *Bulb* Dapp example is available [here](https://github.com/completium/bulb-event-demo).\\n\\nThe bulb is switched on/off by receiving events from the bulb contract. The contract is designed as a simplistic state machine with On and Off states. Two events `SwitchedOn` and `SwitchedOff` are defined and emitted respectively by `switchOn` and `switchOff` entrypoints:\\n\\n```archetype\\narchetype bulb\\n\\nstates = | On | Off\\n\\nevent SwitchedOn {}\\n\\nevent SwitchedOff {}\\n\\ntransition switchOn() {\\n  from Off to On\\n  with effect { emit<SwitchedOn>({}) }\\n}\\n\\ntransition switchOff() {\\n  from On to Off\\n  with effect { emit<SwitchedOff>({}) }\\n}\\n```\\n\\nA live bulb demo is available [here](https://completium.github.io/bulb-event-demo/)."},{"id":"welcome","metadata":{"permalink":"/blog/welcome","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2021-08-26-welcome/index.md","source":"@site/blog/2021-08-26-welcome/index.md","title":"Welcome","description":"We are delighted to present this new documentation for the Archetype language.","date":"2021-08-26T00:00:00.000Z","formattedDate":"August 26, 2021","tags":[{"label":"hello","permalink":"/blog/tags/hello"},{"label":"docusaurus","permalink":"/blog/tags/docusaurus"}],"readingTime":0.06,"truncated":false,"authors":[{"name":"Benoit Rognier","title":"CEO Completium","url":"https://www.linkedin.com/in/benoitrognier/","imageURL":"https://media-exp1.licdn.com/dms/image/C4E03AQF04rtSnCch5A/profile-displayphoto-shrink_400_400/0/1517720007405?e=1658966400&v=beta&t=MkbCyKfZt4yuEkvDxxBk_nMUHtDFJsS42zfhcLlHVX4","key":"br"},{"name":"Guillaume Duhamel","title":"CTO Completium","url":"https://www.linkedin.com/in/guillaumeduhamel/","imageURL":"https://media-exp1.licdn.com/dms/image/C4D03AQGxFFOLb-0sew/profile-displayphoto-shrink_400_400/0/1516528565176?e=1658966400&v=beta&t=w8NwuTiiP--EwNxQK57UHYvBGFvcTccj8NTFav5unVo","key":"gd"}],"frontMatter":{"slug":"welcome","title":"Welcome","authors":["br","gd"],"tags":["hello","docusaurus"]},"prevItem":{"title":"Events","permalink":"/blog/events"}},"content":"We are delighted to present this new documentation for the [Archetype](https://archetype-lang.org/) language."}]}')}}]);