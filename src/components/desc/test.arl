archetype test

variable bar : nat = 0

entry getBar(cb : contract<int>) {
  transfer transferred to entry cb(bar)
}
record voter {
  weight   : nat;
  voted    : bool = false;
  delegate : option<address> = none;
  vote     : nat;
}

asset partitioned identified by k {
  k : nat;
  v : nat
}

states =
| OK
| KO
| Canceled

transition accept(success : bool) {
  refuse transfer
  sourced by selfaddress
  from KO
  to OK when { success } with effect {
    transfer balance to selfaddress
  }
  to Canceled /* when success is false */
}

transition tr() {
    from OK to KO
}

asset partitioning identified by a {
  a      : address;
  assets : aggregate<partitioned>
}

record vehicle_data {
  manufacturer : string;
  release      : date;
  nbdoors      : nat;
}

variable vehicle : map<string, vehicle_data> = [
  ("1G1AF1F57A7192174", { "Renault"; 2021-06-28; 5 });
  ("JNKCV61E49M014581", { "Peugeot"; 2021-07-12; 3 })
]

entry exec () {
    require {
        r1: transferred > 2tz
    }
    effect {
        var vo = { weight = 1; vote = 234523 };
        partitioned.add({ k = 0; v = 0 })
    }
}

variable r : nat = 0

entry exec2(x : nat, y : nat) {
    r := r * x + y
}

entry calling() {
  const e = require_entrypoint<nat *nat>("%exec", selfaddress, "ENTRY_NOT_FOUND");
  const o = mkoperation(0tz, e, (5,3));
  operations := prepend(operations, o)
}