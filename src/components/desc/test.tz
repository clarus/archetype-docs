# (Pair holder (Pair cost deadline))
{
  storage (pair (address %holder) (pair (mutez %cost) (timestamp %deadline)));
  parameter (unit %pay);
  code { NIL operation;
         DIG 1;
         UNPAIR;
         DIP { UNPAIR 3 };
         DROP;
         DUP 3;
         NOW;
         COMPARE;
         GT;
         IF
           { PUSH nat 1;
             PUSH int 86400;
             PAIR;
             PUSH nat 1;
             DUP 5;
             NOW;
             SUB;
             PUSH nat 100;
             PUSH int 7;
             PAIR;
             PAIR;
             UNPAIR;
             UNPAIR;
             DIG 2;
             MUL;
             EDIV;
             IF_NONE
               { PUSH string "DivByZero";
                 FAILWITH }
               {  };
             CAR;
             PAIR;
             PAIR;
             UNPAIR;
             DIP { UNPAIR };
             UNPAIR;
             DIG 3;
             DUP;
             DIG 3;
             DUP;
             DUG 4;
             MUL;
             PUSH nat 0;
             COMPARE;
             EQ;
             IF
               { PUSH string "DivByZero";
                 FAILWITH }
               {  };
             PUSH int 0;
             DIG 4;
             DUP;
             DUG 5;
             COMPARE;
             GE;
             IF
               { INT }
               { NEG };
             MUL;
             DIP { MUL; ABS };
             PAIR }
           { PUSH nat 1;
             PUSH int 0;
             PAIR };
         NIL operation;
         NIL operation;
         DUP 7;
         ITER { CONS };
         DUP 4;
         CONTRACT unit;
         IF_NONE
           { PUSH string "EntryNotFound";
             FAILWITH }
           {  };
         DUP 6;
         UNIT;
         LEFT unit;
         DUP 6;
         PUSH nat 1;
         PUSH nat 1;
         INT;
         PAIR;
         PAIR;
         PAIR;
         UNPAIR;
         UNPAIR;
         DIP { UNPAIR; SWAP; DUP };
         UNPAIR;
         SWAP;
         DUP;
         DIG 3;
         MUL;
         DUP;
         PUSH nat 0;
         COMPARE;
         EQ;
         IF
           { PUSH string "DivByZero";
             FAILWITH }
           {  };
         DUG 4;
         DIG 3;
         MUL;
         DIP { MUL };
         DIG 3;
         IF_LEFT
           { DROP;
             ADD }
           { DROP;
             SWAP;
             SUB };
         PAIR;
         PAIR;
         UNPAIR;
         UNPAIR;
         ABS;
         DIG 2;
         MUL;
         EDIV;
         IF_NONE
           { PUSH string "DivByZero";
             FAILWITH }
           {  };
         CAR;
         UNIT;
         TRANSFER_TOKENS;
         CONS;
         ITER { CONS };
         DIP { DIG 4; DROP };
         DUG 4;
         DROP;
         PAIR 3;
         DIG 1;
         PAIR };
}

